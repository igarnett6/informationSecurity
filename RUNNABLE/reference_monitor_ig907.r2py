"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.tfn = filename
    self.Bfn = filename+'.b'
    self.Afn = filename+'.a'
    self.aValid = False
    self.bValid = False
    # self.tValid = False
    self.trueFile = None
    self.Afile = None
    self.Bfile = None
    self.len = 0

    # make the files and add 'SE' to the readat file...
    if (create==True):
        self.trueFile = openfile(self.tfn, True)
        self.Afile = openfile(self.Afn, True)
        self.Bfile = openfile(self.Bfn, True)
        if(self.Afile.readat(None,0) == ""):
            self.Afile.writeat("SE",0)
        if(self.trueFile.readat(None,0) == ""):
            self.trueFile.writeat("SE",0)
        if(self.Bfile.readat(None,0)== ""):
            self.Bfile.writeat("SE",0)
        temp = self.trueFile.readat(None,0)
        self.len = len(temp)


    elif(create==False):
        self.trueFile = openfile(self.tfn, False)
        self.Afile = openfile(self.Afn, False)
        self.Bfile = openfile(self.Bfn, False)
        temp = self.trueFile.readat(None,0)
        self.len = len(temp)
        if(self.trueFile and self.Afile and self.Bfile):
            pass
        else:
            raise EXCEPTION("No file generated")
    else:
        raise EXCEPTION("Not enough arguments")

  def checkValid(self, file):
    #check for file validity
    valid = False
    temp = file.readat(None,0)
    firstChar = temp[0]
    lastChar = temp[-1]
    if((firstChar=='S') and (lastChar=='E')):
        valid = True
        return valid

  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    if(offset > self.len+1):
        self.Bfile.writeat(data,self.len)
    else:
        self.Bfile.writeat(data,offset)

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)




  def close(self):              #raised an index error???
      #check validity
      self.aValid = self.checkValid(self.Afile)
      self.bValid = self.checkValid(self.Bfile)
      toWrite = ""

      if(self.bValid):
          toWrite = self.Bfile.readat(None,0)
          self.Afile.writeat(toWrite,0)
          self.trueFile.writeat(toWrite,0)
      elif (self.aValid and not self.bValid):
          toWrite = self.Afile.readat(None,0)
          self.trueFile.writeat(toWrite,0)
      else:
          # self.trueFile.writeat("SE",0)
          raise EXCEPTION("File compromised. No accurate backup to write from.")
      self.len = len(toWrite)
      try:
          self.Afile.close()
          self.Bfile.close()
          self.trueFile.close()
      except:
          raise EXCEPTION("File does not exist")


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
