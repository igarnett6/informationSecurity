"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    self.tfn = filename
    self.aValid = False
    self.bValid = False
    self.tValid = False
    self.Afile = None
    self.Bfile = None
    self.trueFile = None

    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.trueFile = openfile(self.tfn, create)
      self.Afile.writeat('SE',0)
      self.Avalid = True
      self.trueFile.writeat('SE',0)
      self.tValid = True
    else:
        raise Exception("Too few arguments. Calls to ABopenfile() must include: ABopenfile(filename, create)")

  def writeat(self,data,offset):

    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def checkValid(self, file):
      #check for file validity
      valid = False
      temp = file.readat(None,0)
      firstChar = temp[0]
      lastChar = temp[-1]
      if((firstChar=='S') and (lastChar=='E')):
        valid = True
      return valid



  def close(self):
      #check validity
      self.aValid = self.checkValid(self.Afile)
      self.bValid = self.checkValid(self.Bfile)
      toWrite = ""

      if(self.aValid and self.bValid):
        toWrite = self.Bfile.readat(None,0)
        self.trueFile.writeat(toWrite,0)
      else:
          toWrite = self.Afile.readat(None,0)
          self.trueFile.writeat(toWrite,0)

      self.Afile.close()
      self.Bfile.close()
      removefile(self.Afile)
      removefile(self.Bfile)
      self.trueFile.close()


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
